name: EveryDiary Release Pipeline

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string

env:
  FLUTTER_VERSION: "3.35.2"
  JAVA_VERSION: "11"

jobs:
  # Î¶¥Î¶¨Ïä§ Ï†Ñ Í≤ÄÏ¶ù
  pre-release-check:
    name: Pre-Release Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Run full test suite
        run: flutter test --coverage

      - name: Analyze code
        run: flutter analyze --fatal-infos

      - name: Check formatting
        run: dart format --set-exit-if-changed .

      - name: Verify version consistency
        run: |
          # pubspec.yamlÏùò Î≤ÑÏ†ÑÍ≥º ÌÉúÍ∑∏ Î≤ÑÏ†ÑÏù¥ ÏùºÏπòÌïòÎäîÏßÄ ÌôïÏù∏
          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2 | cut -d'+' -f1)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          if [ "$PUBSPEC_VERSION" != "$TAG_VERSION" ]; then
            echo "Version mismatch: pubspec.yaml has $PUBSPEC_VERSION but tag is v$TAG_VERSION"
            exit 1
          fi
          echo "Version check passed: $PUBSPEC_VERSION"

  # Î¶¥Î¶¨Ïä§ ÎπåÎìú
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    needs: pre-release-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Build Production APK
        run: |
          export FLUTTER_ENV=production
          flutter build apk --release

      - name: Build Production App Bundle
        run: |
          export FLUTTER_ENV=production
          flutter build appbundle --release

      - name: Build Production Web
        run: |
          export FLUTTER_ENV=production
          flutter build web --release

      - name: Generate release notes
        id: release_notes
        run: |
          # Ïù¥Ï†Ñ ÌÉúÍ∑∏ÏôÄ ÎπÑÍµêÌïòÏó¨ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ ÏÉùÏÑ±
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --max-count=20)
          fi

          echo "## üöÄ EveryDiary Release ${{ github.ref_name }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üì± Build Information" >> release_notes.md
          echo "- **Flutter Version**: ${{ env.FLUTTER_VERSION }}" >> release_notes.md
          echo "- **Build Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> release_notes.md
          echo "- **Commit**: ${{ github.sha }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üì¶ What's New" >> release_notes.md
          echo "$CHANGELOG" >> release_notes.md
          echo "" >> release_notes.md
          echo "### üì• Downloads" >> release_notes.md
          echo "- **APK**: Direct installation for Android devices" >> release_notes.md
          echo "- **AAB**: For Google Play Store distribution" >> release_notes.md
          echo "- **Web**: Browser-based version" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: EveryDiary ${{ github.ref_name }}
          body_path: release_notes.md
          files: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/web/
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ github.ref_name }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/web/
          retention-days: 30

  # Î¶¥Î¶¨Ïä§ ÌõÑ ÏûëÏóÖ
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: release-build
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update development version
        run: |
          # Îã§Ïùå Í∞úÎ∞ú Î≤ÑÏ†ÑÏúºÎ°ú pubspec.yaml ÏóÖÎç∞Ïù¥Ìä∏
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          MAJOR=$(echo $CURRENT_VERSION | cut -d'.' -f1)
          MINOR=$(echo $CURRENT_VERSION | cut -d'.' -f2)
          PATCH=$(echo $CURRENT_VERSION | cut -d'.' -f3 | cut -d'+' -f1)
          BUILD=$(echo $CURRENT_VERSION | cut -d'+' -f2)

          # Ìå®Ïπò Î≤ÑÏ†Ñ Ï¶ùÍ∞Ä
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH+$((BUILD + 1))"

          echo "Updating version from $CURRENT_VERSION to $NEW_VERSION"
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml

          # Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïª§Î∞ã (ÏÑ†ÌÉùÏÇ¨Ìï≠)
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          git commit -m "chore: bump version to $NEW_VERSION" || echo "No changes to commit"
          git push || echo "Failed to push version update"

      - name: Notify release completion
        run: |
          echo "üéâ Release ${{ github.ref_name }} has been successfully created!"
          echo "üì± APK and AAB files are available for download"
          echo "üåê Web version is ready for deployment"
