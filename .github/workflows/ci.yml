name: EveryDiary CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to build for"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

env:
  FLUTTER_VERSION: "3.35.2"
  JAVA_VERSION: "11"

jobs:
  # 코드 품질 검사
  quality-check:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Verify dependencies
        run: flutter pub deps

      - name: Analyze code
        run: flutter analyze --fatal-infos

      - name: Check formatting
        run: dart format --set-exit-if-changed .

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # 빌드 테스트
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        build-type: [debug, profile]
        environment: [development, staging]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Build APK (${{ matrix.build-type }} - ${{ matrix.environment }})
        run: |
          export FLUTTER_ENV=${{ matrix.environment }}
          flutter build apk --${{ matrix.build-type }}

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apk-${{ matrix.build-type }}-${{ matrix.environment }}
          path: build/app/outputs/flutter-apk/

  # 웹 빌드 테스트
  web-build:
    name: Web Build Test
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build Web (Debug)
        run: flutter build web --debug

      - name: Build Web (Release)
        run: flutter build web --release

      - name: Upload Web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/

  # 릴리스 빌드 (main 브랜치에서만)
  release-build:
    name: Release Build
    runs-on: ubuntu-latest
    needs: [quality-check, build-test, web-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
          cache: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: ${{ env.JAVA_VERSION }}

      - name: Get dependencies
        run: flutter pub get

      - name: Build Production APK
        run: |
          export FLUTTER_ENV=production
          flutter build apk --release

      - name: Build Production App Bundle
        run: |
          export FLUTTER_ENV=production
          flutter build appbundle --release

      - name: Build Production Web
        run: |
          export FLUTTER_ENV=production
          flutter build web --release

      - name: Upload Production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-builds
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
            build/web/

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
